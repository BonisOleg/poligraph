from django.shortcuts import render
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.core.mail import send_mail
from django.conf import settings
from django.template.loader import render_to_string
import json
import requests
from datetime import datetime
import os
from django.urls import reverse

def home(request):
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return render(request, 'main/home.html')

def services(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—Å–ª—É–≥"""
    context = {
        'services_list': [
            {
                'title': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–¥—Ä—É–∂–∂—è –Ω–∞ –∑—Ä–∞–¥—É',
                'price': '5000 –≥—Ä–Ω',
                'discount': '–ó–Ω–∏–∂–∫–∞ 50% –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∑ –ø–æ–¥—Ä—É–∂–∂—è',
                'description': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ñ –±—Ä–µ—Ö–Ω—ñ –¥–ª—è –∑\'—è—Å—É–≤–∞–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤ –∑—Ä–∞–¥–∏',
                'icon': 'üíî',
                'features': [
                    '–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å 100%',
                    '–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç',
                    '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞',
                    '–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤—ñ–¥–µ–æ'
                ]
            },
            {
                'title': '–°–∫—Ä–∏–Ω—ñ–Ω–≥ –ø—Ä–∏ –ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ',
                'price': '2500/4000 –≥—Ä–Ω',
                'description': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ —Ä–æ–±–æ—Ç—É –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ',
                'icon': 'üë•',
                'features': [
                    '–ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - 2500 –≥—Ä–Ω',
                    '–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–∫—Ä–∏–Ω—ñ–Ω–≥ - 4000 –≥—Ä–Ω',
                    '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—é–º–µ',
                    '–û—Ü—ñ–Ω–∫–∞ —á–µ—Å–Ω–æ—Å—Ç—ñ'
                ]
            },
            {
                'title': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ—é—á–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É',
                'price': '2500/4000 –≥—Ä–Ω',
                'description': '–†–µ–≥—É–ª—è—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–æ–≤—ñ—Ä–∏',
                'icon': 'üè¢',
                'features': [
                    '–ü–ª–∞–Ω–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏',
                    '–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –ø–æ—Ä—É—à–µ–Ω—å',
                    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞ –µ—Ç–∏–∫–∞',
                    '–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–∞'
                ]
            },
            {
                'title': '–ü—Ä–∏–≤–∞—Ç–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è',
                'price': '5000 –≥—Ä–Ω',
                'description': '–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–∏—Ç–∞–Ω—å',
                'icon': 'üîí',
                'features': [
                    '–ü–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å',
                    '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥',
                    '–ë–µ–∑–ø–µ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ',
                    '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –µ–∫—Å–ø–µ—Ä—Ç–∞'
                ]
            },
            {
                'title': '–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∫—Ä–∞–¥—ñ–∂–æ–∫',
                'price': '5000 –≥—Ä–Ω',
                'description': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫—ñ–≤ –∫—Ä–∞–¥—ñ–∂–æ–∫ —Ç–∞ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–∞',
                'icon': 'üîç',
                'features': [
                    '–®–≤–∏–¥–∫–µ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è',
                    '–ó–±—ñ—Ä –¥–æ–∫–∞–∑—ñ–≤',
                    '–°–ø—ñ–≤–ø—Ä–∞—Ü—è –∑ –ø—Ä–∞–≤–æ–æ—Ö–æ—Ä–æ–Ω—Ü—è–º–∏',
                    '–í—ñ–¥—à–∫–æ–¥—É–≤–∞–Ω–Ω—è –∑–±–∏—Ç–∫—ñ–≤'
                ]
            },
            {
                'title': '–ü–æ—à—É–∫–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏—Ö –¥–æ–∫–∞–∑—ñ–≤',
                'price': '5000 –≥—Ä–Ω',
                'discount': '–ó–Ω–∏–∂–∫–∞ –≤—ñ–π—Å—å–∫–æ–≤–∏–º 10%',
                'description': '–ü–æ—à—É–∫ —Ç–∞ –∑–±—ñ—Ä –¥–æ–∫–∞–∑–æ–≤–æ—ó –±–∞–∑–∏ –¥–ª—è —Å—É–¥–æ–≤–∏—Ö —Å–ø—Ä–∞–≤',
                'icon': '‚öñÔ∏è',
                'features': [
                    '–Æ—Ä–∏–¥–∏—á–Ω–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å',
                    '–î–æ–∫—É–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É',
                    '–ï–∫—Å–ø–µ—Ä—Ç–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏',
                    '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å—É–¥—É'
                ]
            }
        ]
    }
    return render(request, 'main/services.html', context)

def about(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ –º–µ–Ω–µ"""
    context = {
        'certifications': [
            {
                'title': '–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —ñ–º–µ–Ω—ñ –Ø—Ä–æ—Å–ª–∞–≤–∞ –ú—É–¥—Ä–æ–≥–æ',
                'organization': '–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: –ü—Ä–∞–≤–æ–∑–Ω–∞–≤—Å—Ç–≤–æ',
                'year': '2020',
                'description': '–î–∏–ø–ª–æ–º –º–∞–≥—ñ—Å—Ç—Ä–∞ –∑ –≤—ñ–¥–∑–Ω–∞–∫–æ—é'
            },
            {
                'title': '–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∞–∫–∞–¥–µ–º—ñ—è –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–∏ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤—ñ –£–∫—Ä–∞—ó–Ω–∏',
                'organization': '–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: –ü—É–±–ª—ñ—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è',
                'year': '2022',
                'description': '–î–∏–ø–ª–æ–º –º–∞–≥—ñ—Å—Ç—Ä–∞'
            },
            {
                'title': '–ö—É—Ä—Å–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó',
                'organization': '–î–ù–ü –î–µ—Ä–∂–∞–≤–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç ¬´–ö–∏—ó–≤—Å—å–∫–∏–π –∞–≤—ñ–∞—Ü—ñ–π–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç¬ª',
                'year': '2023',
                'description': '–ü—Ä–æ–≥—Ä–∞–º–∞ ¬´–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑ —ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–æ–ª—ñ–≥—Ä–∞—Ñ–∞¬ª'
            },
            {
                'title': '–ö–µ—Ä—ñ–≤–Ω–∏—Ü—è –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–∞ –ù–ê–ü–£ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ',
                'organization': '–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∞—Å–æ—Ü—ñ–∞—Ü—ñ—è –ø–æ–ª—ñ–≥—Ä–∞—Ñ–æ–ª–æ–≥—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏',
                'year': '2024',
                'description': '–û—Ñ—ñ—Ü—ñ–π–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–æ –≤ —Ä–µ–≥—ñ–æ–Ω—ñ'
            }
        ],
        'cases_completed': 150,
        'accuracy_rate': 98
    }
    return render(request, 'main/about.html', context)

def equipment(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"""
    context = {
        'main_device': {
            'name': '–ü–æ–ª—ñ–≥—Ä–∞—Ñ "–†–£–ë–Ü–ö–û–ù"',
            'model': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –≤–µ—Ä—Å—ñ—è',
            'description': '–°—É—á–∞—Å–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π—Å—å–∫–∏–π –ø–æ–ª—ñ–≥—Ä–∞—Ñ –≤—ñ–¥ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ –∑ –Ω–∞–¥—ñ–π–Ω–∏–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏–º–∏',
            'features': [
                'üîß –Ø–∫—ñ—Å–Ω—ñ –∫–æ–Ω–µ–∫—Ç–æ—Ä–∏ —Ç–∞ –¥–∞–≤–∞—á—ñ',
                'üåø –ï–∫–æ–ª–æ–≥—ñ—á–Ω–æ –±–µ–∑–ø–µ—á–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
                'üìä 7 —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤', 
                'üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç—ñ—è –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –¥–æ 3 —Ä–æ–∫—ñ–≤'
            ],
            'specifications': {
                '–¢–æ—á–Ω—ñ—Å—Ç—å': '95-98%',
                '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–Ω–∞–ª—ñ–≤': '7',
                '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏': '–®–ì–†, –§–ü–ì, –î–∏—Ö–∞–Ω–Ω—è, –¢–∏—Å–∫',
                '–ì–∞—Ä–∞–Ω—Ç—ñ—è': '–î–æ 3 —Ä–æ–∫—ñ–≤'
            }
        },
        'additional_equipment': [
            {
                'name': '‚ö° –î–∞–≤–∞—á –®–ì–†',
                'description': '–î–∞–≤–∞—á —à–∫—ñ—Ä–Ω–æ-–≥–∞–ª—å–≤–∞–Ω—ñ—á–Ω–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —à–∫—ñ—Ä–∏'
            },
            {
                'name': '‚ù§Ô∏è –î–∞–≤–∞—á –§–ü–ì',
                'description': '–§–æ—Ç–æ–ø–ª–µ—Ç–∏–∑–º–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –¥–∞–≤–∞—á –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—É–ª—å—Å—É —Ç–∞ —Å–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
            },
            {
                'name': 'ü´Å –î–∞–≤–∞—á—ñ –¥–∏—Ö–∞–Ω–Ω—è',
                'description': '2 –∫–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥—Ä—É–¥–Ω–æ–≥–æ —Ç–∞ –¥—ñ–∞—Ñ—Ä–∞–≥–º–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ö–∞–Ω–Ω—è'
            },
            {
                'name': 'üíì –î–∞–≤–∞—á –∞—Ä—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ —Ç–∏—Å–∫—É',
                'description': '–ú–∞–Ω–∂–µ—Ç–∞ –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∞—Ä—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ —Ç–∏—Å–∫—É –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è'
            }
        ]
    }
    return render(request, 'main/equipment.html', context)

def contacts(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"""
    return render(request, 'main/contacts.html')

def reviews(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤"""
    context = {
        'reviews_list': [
            {
                'name': '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ö.',
                'service': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—É',
                'rating': 5,
                'text': '–®–≤–∏–¥–∫–æ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –≤–∏—è–≤–∏–ª–∏ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤—ñ—Å–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é!',
                'date': '15.03.2025'
            },
            {
                'name': '–ú–∞—Ä–∏–Ω–∞ –í.',
                'service': '–û—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è',
                'rating': 5,
                'text': '–î—É–∂–µ –¥–µ–ª—ñ–∫–∞—Ç–Ω–æ –ø—ñ–¥—ñ–π—à–ª–∏ –¥–æ –º–æ—î—ó —Å–∏—Ç—É–∞—Ü—ñ—ó. –û—Ç—Ä–∏–º–∞–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è.',
                'date': '28.03.2025'
            },
            {
                'name': '–¢–û–í "–¢–µ—Ö–Ω–æ—Å—Ñ–µ—Ä–∞"',
                'service': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞',
                'rating': 5,
                'text': '–†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ—Ä–∏—Å—Ç—É—î–º–æ—Å—è –ø–æ—Å–ª—É–≥–∞–º–∏. –í–∏—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–∑–º —Ç–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.',
                'date': '05.04.2025'
            }
        ]
    }
    return render(request, 'main/reviews.html', context)

# Telegram –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')

def send_telegram_message(message):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("Telegram credentials not configured")
        return False
        
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            print("Telegram message sent successfully")
            return True
        else:
            print(f"Telegram API error: {response.status_code}, {response.text}")
            return False
            
    except Exception as e:
        print(f"Telegram error: {e}")
        return False

@csrf_exempt
@require_http_methods(["POST"])
def send_contact_form(request):
    """API –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤ Telegram"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î body —É –∑–∞–ø–∏—Ç—ñ
        if not request.body:
            return JsonResponse({'success': False, 'message': '–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç'})
            
        data = json.loads(request.body)
        name = data.get('name', '').strip()
        phone = data.get('phone', '').strip()
        service = data.get('service', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
        message = data.get('message', '').strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not name or len(name) < 2:
            return JsonResponse({'success': False, 'message': "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"})
        
        if not phone or len(phone) < 10:
            return JsonResponse({'success': False, 'message': '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'})
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
        telegram_message = f"""
üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É!</b>

üë§ <b>–Ü–º'—è:</b> {name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üéØ <b>–ü–æ—Å–ª—É–≥–∞:</b> {service}

üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>
{message if message else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üìÖ <b>–ß–∞—Å:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
üåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> –°–∞–π—Ç –ø–æ–ª—ñ–≥—Ä–∞—Ñ–æ–ª–æ–≥–∞
"""
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        if send_telegram_message(telegram_message):
            return JsonResponse({'success': True, 'message': '–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω.'})
        else:
            return JsonResponse({'success': False, 'message': '–¢–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º: +38 (067) 524-33-54'})
            
    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö'})
    except Exception as e:
        print(f"Contact form error: {e}")
        return JsonResponse({'success': False, 'message': '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏: +38 (067) 524-33-54'})

@csrf_exempt
@require_http_methods(["POST"])
def send_review_form(request):
    """API –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ –≤—ñ–¥–≥—É–∫—ñ–≤ –≤ Telegram"""
    try:
        data = json.loads(request.body)
        name = data.get('name', '').strip()
        service = data.get('service', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
        rating = data.get('rating', '')
        review = data.get('review', '').strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not name or len(name) < 2:
            return JsonResponse({'success': False, 'message': "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"})
        
        if not rating:
            return JsonResponse({'success': False, 'message': '–û–±–µ—Ä—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥'})
        
        if not review or len(review) < 10:
            return JsonResponse({'success': False, 'message': '–í—ñ–¥–≥—É–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤'})
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
        stars = '‚≠ê' * int(rating)
        telegram_message = f"""
üìù <b>–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫!</b>

üë§ <b>–Ü–º'—è:</b> {name}
üéØ <b>–ü–æ—Å–ª—É–≥–∞:</b> {service}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {stars} ({rating}/5)

üí¨ <b>–í—ñ–¥–≥—É–∫:</b>
{review}

üìÖ <b>–ß–∞—Å:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        if send_telegram_message(telegram_message):
            return JsonResponse({'success': True, 'message': '–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!'})
        else:
            return JsonResponse({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'})
            
    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'message': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö'})
    except Exception as e:
        print(f"Review form error: {e}")
        return JsonResponse({'success': False, 'message': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'})

@csrf_exempt  
@require_http_methods(["POST"])
def send_quick_order(request):
    """API –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏"""
    try:
        if not request.body:
            return JsonResponse({'success': False, 'message': '–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç'})
            
        data = json.loads(request.body)
        name = data.get('name', '').strip()
        phone = data.get('phone', '').strip()
        service = data.get('service', '')
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not name or len(name) < 2:
            return JsonResponse({'success': False, 'message': "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"})
        
        if not phone or len(phone) < 10:
            return JsonResponse({'success': False, 'message': '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'})
            
        if not service:
            return JsonResponse({'success': False, 'message': '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É'})
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
        telegram_message = f"""
‚ö° <b>–®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>

üë§ <b>–Ü–º'—è:</b> {name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üéØ <b>–ü–æ—Å–ª—É–≥–∞:</b> {service}

üìÖ <b>–ß–∞—Å:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
üåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> –°–∞–π—Ç –ø–æ–ª—ñ–≥—Ä–∞—Ñ–æ–ª–æ–≥–∞
‚è∞ <b>–¢–∏–ø:</b> –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞ - –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω!
"""
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        if send_telegram_message(telegram_message):
            return JsonResponse({'success': True, 'message': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ü–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω.'})
        else:
            return JsonResponse({'success': False, 'message': '–¢–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: +38 (067) 524-33-54'})
            
    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö'})
    except Exception as e:
        print(f"Quick order error: {e}")
        return JsonResponse({'success': False, 'message': '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: +38 (067) 524-33-54'})

def robots_txt(request):
    lines = [
        "User-agent: *",
        "Allow: /",
        "Disallow: /admin/",
        "Disallow: /private/",
        "",
        "# –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –õ—å–≤–æ–≤–∞",
        "Allow: /poligrafolog-lviv/",
        "Allow: /perevirka-na-poligrafi-lviv/",
        "Allow: /robotodavtsyam/",
        "",
        "# –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏",
        "Allow: /services/",
        "Allow: /about/",
        "Allow: /equipment/",
        "Allow: /contacts/",
        "",
        "Sitemap: https://polygraph.website/sitemap.xml"
    ]
    return HttpResponse("\n".join(lines), content_type="text/plain")

def sitemap_xml(request):
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>https://polygraph.website/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>weekly</changefreq>
        <priority>1.0</priority>
    </url>
    <url>
        <loc>https://polygraph.website/poligrafolog-lviv/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>weekly</changefreq>
        <priority>0.9</priority>
    </url>
    <url>
        <loc>https://polygraph.website/perevirka-na-poligrafi-lviv/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>weekly</changefreq>
        <priority>0.9</priority>
    </url>
    <url>
        <loc>https://polygraph.website/robotodavtsyam/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>weekly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>https://polygraph.website/services/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>weekly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>https://polygraph.website/about/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.7</priority>
    </url>
    <url>
        <loc>https://polygraph.website/equipment/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.7</priority>
    </url>
    <url>
        <loc>https://polygraph.website/contacts/</loc>
        <lastmod>{date}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.7</priority>
    </url>
</urlset>""".format(date=datetime.now().strftime('%Y-%m-%d'))

    return HttpResponse(xml_content, content_type='application/xml')

# –ù–æ–≤—ñ SEO-–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –õ—å–≤–æ–≤–∞
def poligrafolog_lviv(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–ª—ñ–≥—Ä–∞—Ñ–æ–ª–æ–≥–∞ —É –õ—å–≤–æ–≤—ñ"""
    return render(request, 'main/poligrafolog_lviv.html')

def perevirka_lviv(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –ø–æ–ª—ñ–≥—Ä–∞—Ñ—ñ —É –õ—å–≤–æ–≤—ñ"""
    return render(request, 'main/perevirka_lviv.html')

def robotodavtsyam(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤"""
    return render(request, 'main/robotodavtsyam.html') 